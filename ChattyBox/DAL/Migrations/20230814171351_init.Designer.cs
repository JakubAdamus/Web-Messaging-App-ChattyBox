// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DbChattyBox))]
    [Migration("20230814171351_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 14, 19, 13, 51, 286, DateTimeKind.Local).AddTicks(1631),
                            Name = "Chat1"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DAL.Database.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastLog")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 14, 19, 13, 51, 286, DateTimeKind.Local).AddTicks(1226),
                            Email = "marcinq@gmail.com",
                            PasswordHash = new byte[] { 230, 244, 3, 124, 68, 198, 182, 80, 195, 216, 103, 47, 131, 228, 93, 48, 84, 55, 66, 123, 160, 55, 90, 21, 166, 86, 218, 149, 142, 153, 94, 87, 242, 143, 169, 210, 53, 115, 185, 233, 201, 112, 221, 38, 165, 220, 233, 179, 149, 73, 129, 137, 200, 154, 33, 168, 251, 96, 204, 240, 114, 157, 166, 102 },
                            PasswordSalt = new byte[] { 198, 164, 130, 12, 93, 104, 205, 244, 141, 65, 227, 137, 220, 250, 250, 148, 177, 141, 56, 88, 179, 47, 147, 250, 140, 49, 164, 45, 157, 51, 113, 36, 39, 76, 203, 183, 216, 223, 120, 166, 162, 102, 57, 196, 70, 230, 238, 182, 136, 173, 157, 202, 65, 109, 144, 204, 89, 186, 135, 76, 20, 68, 245, 124, 229, 65, 214, 79, 75, 227, 202, 121, 199, 229, 65, 184, 208, 145, 107, 135, 218, 41, 223, 213, 62, 181, 171, 159, 22, 36, 97, 143, 114, 135, 87, 85, 170, 193, 124, 163, 117, 27, 191, 152, 32, 104, 41, 167, 236, 105, 20, 50, 220, 208, 46, 234, 105, 20, 84, 216, 33, 192, 233, 232, 138, 20, 171, 104 },
                            RefreshToken = "FiVJV+i5P5Wg+q8mScGggVMZUAeT7bYPM6X22vLhvWO7+MjC7lNth15Vj4eUcvj9FoUaayvxZ4G0BlEVNsbUUg==",
                            TokenCreated = new DateTime(2023, 8, 14, 19, 13, 51, 286, DateTimeKind.Local).AddTicks(1284),
                            TokenExpires = new DateTime(2023, 8, 15, 19, 13, 51, 286, DateTimeKind.Local).AddTicks(1291),
                            Username = "MarIwin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 14, 19, 13, 51, 286, DateTimeKind.Local).AddTicks(1340),
                            Email = "tymonq@gmail.com",
                            PasswordHash = new byte[] { 205, 82, 40, 199, 29, 153, 227, 103, 162, 64, 97, 64, 186, 95, 145, 248, 94, 28, 95, 21, 94, 22, 58, 186, 221, 22, 24, 48, 222, 156, 247, 180, 103, 192, 222, 54, 8, 236, 134, 213, 67, 240, 197, 114, 84, 161, 154, 218, 109, 68, 161, 126, 100, 27, 62, 33, 187, 197, 207, 200, 176, 94, 59, 199 },
                            PasswordSalt = new byte[] { 104, 147, 140, 53, 157, 197, 179, 36, 215, 46, 106, 144, 89, 30, 194, 145, 251, 161, 71, 239, 209, 235, 82, 60, 164, 7, 42, 193, 143, 163, 73, 114, 81, 121, 164, 246, 188, 72, 243, 27, 81, 113, 128, 149, 31, 135, 165, 255, 220, 91, 191, 5, 16, 52, 180, 65, 203, 154, 12, 26, 96, 108, 68, 243, 135, 132, 139, 113, 86, 95, 114, 166, 205, 246, 226, 174, 63, 65, 101, 223, 166, 68, 206, 162, 80, 139, 0, 78, 93, 114, 155, 70, 51, 26, 191, 110, 215, 4, 125, 159, 53, 16, 110, 109, 205, 63, 196, 32, 108, 114, 1, 111, 92, 16, 131, 40, 253, 120, 158, 97, 66, 120, 176, 139, 225, 15, 156, 164 },
                            RefreshToken = "MtWiD9qFmAf2REQd6VCpodfsIBn1WLubjH4/DK4du8B0l3ErppjuVuxrCCZ/ayHwVyakA05Jv05bJmqkgskFnw==",
                            TokenCreated = new DateTime(2023, 8, 14, 19, 13, 51, 286, DateTimeKind.Local).AddTicks(1345),
                            TokenExpires = new DateTime(2023, 8, 15, 19, 13, 51, 286, DateTimeKind.Local).AddTicks(1347),
                            Username = "TymonSme"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.UserChat", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ChatId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            ChatId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.FileMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.ToTable("FileMessage", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 2)
                                .HasAnnotation("SqlServer:IdentitySeed", 2L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "stockImage.jpg",
                            Path = "files\\Chat1\\stockImage.jpg",
                            Size = 0.09969329833984375
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "stockGif.gif",
                            Path = "files\\Chat1\\stockGif.gif",
                            Size = 5.467991828918457
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.TextMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("TextMessages", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 2)
                                .HasAnnotation("SqlServer:IdentitySeed", 1L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello1"
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello2"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DAL.Database.Entities.UserChat", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.Role", "Role")
                        .WithMany("UserChats")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("DAL.Database.Entities.Role", b =>
                {
                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });
#pragma warning restore 612, 618
        }
    }
}
