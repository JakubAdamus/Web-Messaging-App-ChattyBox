// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DbChattyBox))]
    partial class DbChattyBoxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("MessageSequence");

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.Property<int>("ChatsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserChat", (string)null);
                });

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 3, 18, 17, 49, 11, 858, DateTimeKind.Local).AddTicks(6952),
                            Name = "Chat1"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MessageSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastLog")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 3, 18, 17, 49, 11, 858, DateTimeKind.Local).AddTicks(6790),
                            Email = "marcinq@gmail.com",
                            PasswordHash = new byte[] { 50, 57, 60, 66, 143, 65, 97, 169, 251, 50, 92, 135, 81, 1, 34, 96, 161, 101, 228, 74, 34, 46, 120, 202, 147, 58, 237, 75, 15, 159, 87, 183, 26, 194, 107, 220, 161, 115, 132, 228, 146, 129, 155, 214, 170, 223, 135, 254, 222, 229, 118, 237, 23, 167, 221, 18, 43, 167, 72, 209, 37, 18, 217, 89 },
                            PasswordSalt = new byte[] { 242, 196, 159, 237, 82, 96, 148, 16, 113, 208, 114, 170, 206, 42, 93, 71, 138, 86, 23, 18, 30, 121, 130, 155, 237, 202, 82, 156, 141, 206, 193, 180, 1, 167, 69, 24, 229, 85, 181, 120, 247, 124, 231, 199, 119, 183, 56, 236, 210, 230, 130, 79, 216, 195, 61, 47, 173, 111, 43, 68, 11, 76, 22, 143, 131, 74, 129, 61, 146, 217, 186, 92, 102, 9, 229, 30, 176, 161, 157, 220, 28, 23, 112, 195, 185, 27, 4, 194, 28, 156, 180, 161, 4, 244, 109, 187, 134, 117, 224, 103, 216, 122, 132, 232, 12, 96, 33, 137, 224, 42, 215, 126, 111, 143, 215, 234, 174, 153, 189, 133, 21, 246, 121, 12, 5, 199, 162, 11 },
                            Username = "MarIwin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 3, 18, 17, 49, 11, 858, DateTimeKind.Local).AddTicks(6822),
                            Email = "tymonq@gmail.com",
                            PasswordHash = new byte[] { 124, 55, 186, 225, 251, 71, 3, 244, 24, 138, 221, 246, 104, 18, 212, 115, 204, 133, 71, 73, 102, 182, 170, 230, 47, 146, 157, 237, 8, 53, 180, 134, 179, 194, 223, 42, 88, 136, 58, 232, 91, 79, 125, 43, 93, 122, 214, 38, 116, 47, 148, 193, 19, 65, 102, 250, 108, 26, 128, 233, 41, 127, 0, 217 },
                            PasswordSalt = new byte[] { 9, 131, 105, 67, 107, 206, 238, 145, 133, 36, 98, 161, 195, 210, 205, 116, 77, 168, 252, 186, 132, 214, 222, 179, 58, 90, 31, 253, 82, 226, 63, 107, 248, 114, 175, 22, 86, 178, 176, 180, 230, 103, 249, 133, 41, 190, 124, 115, 118, 136, 177, 151, 193, 18, 164, 92, 237, 38, 182, 75, 88, 3, 9, 200, 70, 54, 59, 249, 172, 218, 95, 11, 228, 135, 9, 184, 70, 139, 46, 201, 96, 151, 201, 40, 72, 41, 1, 222, 86, 133, 133, 196, 213, 46, 40, 96, 58, 154, 97, 210, 112, 19, 105, 57, 71, 36, 54, 209, 239, 191, 74, 22, 98, 189, 229, 103, 18, 178, 167, 14, 126, 96, 129, 26, 60, 40, 8, 191 },
                            Username = "TymonSme"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.FileMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FileMessages", (string)null);
                });

            modelBuilder.Entity("DAL.Database.Entities.TextMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("TextMessages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello1"
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello2"
                        });
                });

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
