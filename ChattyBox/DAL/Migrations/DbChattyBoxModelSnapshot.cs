// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DbChattyBox))]
    partial class DbChattyBoxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 3, 25, 22, 31, 53, 729, DateTimeKind.Local).AddTicks(296),
                            Name = "Chat1"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastLog")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 3, 25, 22, 31, 53, 729, DateTimeKind.Local).AddTicks(209),
                            Email = "marcinq@gmail.com",
                            PasswordHash = new byte[] { 252, 199, 6, 19, 93, 77, 249, 85, 81, 43, 139, 180, 221, 161, 199, 194, 32, 35, 99, 198, 97, 32, 244, 152, 185, 154, 209, 146, 132, 10, 246, 242, 141, 65, 91, 234, 152, 129, 116, 77, 235, 50, 52, 65, 84, 120, 88, 245, 180, 126, 70, 199, 252, 122, 129, 4, 201, 10, 99, 29, 2, 120, 64, 14 },
                            PasswordSalt = new byte[] { 28, 233, 226, 32, 157, 155, 196, 201, 57, 161, 195, 163, 22, 5, 62, 87, 205, 90, 7, 162, 27, 192, 137, 40, 110, 38, 205, 212, 189, 9, 186, 195, 34, 57, 250, 95, 80, 183, 234, 159, 155, 243, 11, 254, 82, 88, 35, 128, 31, 70, 242, 198, 124, 112, 11, 92, 118, 122, 195, 230, 132, 181, 220, 78, 154, 195, 89, 159, 223, 38, 34, 243, 148, 107, 160, 217, 88, 131, 210, 71, 50, 161, 78, 1, 33, 27, 118, 173, 148, 88, 132, 104, 150, 52, 123, 156, 12, 201, 161, 174, 250, 248, 90, 123, 236, 184, 129, 255, 120, 86, 163, 226, 208, 137, 139, 157, 151, 55, 189, 61, 190, 202, 97, 28, 144, 72, 103, 215 },
                            Username = "MarIwin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 3, 25, 22, 31, 53, 729, DateTimeKind.Local).AddTicks(243),
                            Email = "tymonq@gmail.com",
                            PasswordHash = new byte[] { 58, 24, 104, 222, 197, 45, 199, 84, 12, 255, 75, 226, 6, 1, 12, 3, 102, 97, 84, 70, 235, 203, 63, 94, 190, 129, 200, 74, 166, 43, 212, 41, 92, 99, 16, 164, 43, 30, 4, 129, 119, 61, 53, 93, 191, 148, 177, 175, 144, 30, 42, 10, 124, 81, 9, 195, 201, 197, 8, 226, 211, 146, 94, 82 },
                            PasswordSalt = new byte[] { 191, 235, 161, 38, 86, 157, 204, 229, 121, 211, 105, 174, 85, 132, 180, 64, 3, 11, 44, 134, 123, 186, 215, 68, 33, 169, 208, 29, 40, 102, 242, 119, 0, 57, 1, 163, 104, 114, 40, 119, 167, 134, 133, 157, 109, 7, 196, 216, 244, 229, 97, 92, 240, 137, 112, 1, 192, 183, 112, 144, 183, 234, 184, 103, 92, 32, 163, 155, 114, 47, 141, 178, 118, 206, 78, 251, 30, 212, 143, 135, 38, 153, 125, 251, 32, 247, 138, 81, 35, 39, 134, 34, 124, 106, 145, 103, 170, 145, 253, 131, 138, 67, 154, 153, 141, 133, 247, 227, 213, 194, 238, 244, 228, 2, 10, 168, 186, 79, 16, 83, 246, 231, 249, 32, 4, 93, 54, 130 },
                            Username = "TymonSme"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.UserChat", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ChatId = 1
                        },
                        new
                        {
                            UserId = 2,
                            ChatId = 1
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.FileMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.ToTable("FileMessage", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 2)
                                .HasAnnotation("SqlServer:IdentitySeed", 2L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "File1.txt",
                            Path = "Path1",
                            Size = 0.0
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "File2.txt",
                            Path = "Path1",
                            Size = 0.0
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.TextMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("TextMessages", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 2)
                                .HasAnnotation("SqlServer:IdentitySeed", 1L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello1"
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello2"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DAL.Database.Entities.UserChat", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });
#pragma warning restore 612, 618
        }
    }
}
