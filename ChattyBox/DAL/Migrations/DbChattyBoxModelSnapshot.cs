// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DbChattyBox))]
    partial class DbChattyBoxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 5, 25, 19, 4, 41, 26, DateTimeKind.Local).AddTicks(1013),
                            Name = "Chat1"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DAL.Database.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastLog")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 5, 25, 19, 4, 41, 26, DateTimeKind.Local).AddTicks(681),
                            Email = "marcinq@gmail.com",
                            PasswordHash = new byte[] { 44, 188, 254, 200, 191, 65, 86, 220, 212, 29, 129, 115, 236, 58, 65, 110, 83, 18, 15, 51, 154, 102, 128, 191, 62, 106, 216, 2, 180, 58, 246, 75, 176, 158, 203, 193, 95, 63, 151, 38, 131, 59, 101, 156, 90, 178, 28, 194, 66, 4, 17, 214, 91, 129, 73, 235, 24, 51, 97, 3, 168, 117, 234, 221 },
                            PasswordSalt = new byte[] { 69, 76, 31, 68, 156, 11, 197, 132, 127, 235, 43, 234, 253, 82, 49, 100, 60, 42, 5, 164, 193, 99, 43, 43, 55, 206, 228, 121, 46, 27, 193, 89, 92, 42, 105, 140, 227, 251, 92, 112, 226, 78, 35, 177, 211, 108, 118, 209, 41, 43, 200, 204, 213, 220, 166, 186, 22, 183, 12, 167, 62, 118, 5, 167, 120, 190, 177, 112, 147, 83, 167, 225, 38, 229, 100, 4, 195, 176, 99, 192, 251, 32, 81, 138, 80, 182, 225, 45, 73, 3, 200, 21, 175, 25, 94, 201, 8, 9, 36, 12, 43, 24, 226, 82, 28, 175, 130, 173, 56, 224, 57, 235, 46, 52, 52, 93, 124, 125, 130, 141, 71, 0, 161, 229, 129, 36, 13, 35 },
                            RefreshToken = "FL1RR9c+DTmRT20IyVPtFoIZYkzXxbPqN71oATGz4MVKBfBRCi+cEj4wg0IBt/0CCo6TyVOA4LzpGewzlZyPHA==",
                            TokenCreated = new DateTime(2023, 5, 25, 19, 4, 41, 26, DateTimeKind.Local).AddTicks(724),
                            TokenExpires = new DateTime(2023, 5, 26, 19, 4, 41, 26, DateTimeKind.Local).AddTicks(729),
                            Username = "MarIwin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 5, 25, 19, 4, 41, 26, DateTimeKind.Local).AddTicks(752),
                            Email = "tymonq@gmail.com",
                            PasswordHash = new byte[] { 217, 120, 219, 130, 79, 199, 205, 222, 68, 156, 60, 56, 203, 199, 90, 157, 169, 168, 74, 65, 118, 232, 3, 42, 38, 236, 223, 52, 127, 171, 34, 84, 227, 10, 122, 32, 172, 88, 221, 250, 66, 136, 76, 7, 19, 248, 129, 17, 247, 159, 123, 226, 173, 23, 241, 244, 6, 42, 179, 196, 234, 126, 176, 250 },
                            PasswordSalt = new byte[] { 105, 149, 158, 90, 216, 239, 96, 5, 163, 88, 190, 102, 156, 148, 28, 189, 99, 69, 251, 195, 186, 125, 129, 86, 84, 93, 189, 189, 46, 136, 79, 96, 122, 135, 202, 141, 13, 88, 8, 184, 70, 76, 114, 183, 226, 27, 73, 235, 230, 218, 39, 205, 38, 134, 65, 246, 176, 48, 118, 18, 127, 82, 135, 157, 131, 92, 65, 49, 83, 203, 204, 35, 212, 51, 14, 138, 75, 212, 40, 153, 186, 61, 219, 159, 132, 112, 222, 174, 193, 246, 226, 83, 231, 217, 178, 213, 219, 240, 28, 2, 83, 81, 211, 231, 128, 169, 30, 143, 181, 24, 196, 177, 233, 48, 151, 31, 157, 67, 161, 16, 52, 120, 161, 245, 176, 179, 203, 65 },
                            RefreshToken = "pnRvCXKg8Zz9xjTS/n2UBBO11MQB4OKpo27BVMYLKul4lL0h9GKrpcz4GiUDdT5iQS/x71KUjykQ/6O9C3j48w==",
                            TokenCreated = new DateTime(2023, 5, 25, 19, 4, 41, 26, DateTimeKind.Local).AddTicks(754),
                            TokenExpires = new DateTime(2023, 5, 26, 19, 4, 41, 26, DateTimeKind.Local).AddTicks(756),
                            Username = "TymonSme"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.UserChat", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ChatId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            ChatId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.FileMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.ToTable("FileMessage", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 2)
                                .HasAnnotation("SqlServer:IdentitySeed", 2L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "stockImage.jpg",
                            Path = "files\\Chat1\\stockImage.jpg",
                            Size = 0.09969329833984375
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "stockGif.gif",
                            Path = "files\\Chat1\\stockGif.gif",
                            Size = 5.467991828918457
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.TextMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("TextMessages", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 2)
                                .HasAnnotation("SqlServer:IdentitySeed", 1L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello1"
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello2"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DAL.Database.Entities.UserChat", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.Role", "Role")
                        .WithMany("UserChats")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("DAL.Database.Entities.Role", b =>
                {
                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });
#pragma warning restore 612, 618
        }
    }
}
