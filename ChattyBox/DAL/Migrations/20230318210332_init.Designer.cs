// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DbChattyBox))]
    [Migration("20230318210332_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("MessageSequence");

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.Property<int>("ChatsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserChat", (string)null);
                });

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 3, 18, 22, 3, 32, 681, DateTimeKind.Local).AddTicks(6794),
                            Name = "Chat1"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MessageSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastLog")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 3, 18, 22, 3, 32, 681, DateTimeKind.Local).AddTicks(6626),
                            Email = "marcinq@gmail.com",
                            PasswordHash = new byte[] { 62, 123, 191, 213, 14, 172, 19, 198, 189, 89, 61, 166, 104, 93, 33, 64, 86, 202, 52, 141, 134, 208, 177, 101, 116, 255, 53, 1, 197, 11, 169, 254, 50, 118, 238, 156, 54, 74, 42, 42, 49, 213, 151, 19, 22, 198, 199, 234, 230, 190, 74, 138, 133, 174, 214, 4, 44, 31, 61, 89, 88, 240, 245, 149 },
                            PasswordSalt = new byte[] { 48, 178, 47, 58, 180, 228, 69, 35, 203, 226, 227, 241, 26, 88, 48, 168, 160, 177, 88, 195, 89, 233, 202, 92, 244, 51, 158, 169, 108, 60, 222, 188, 50, 223, 245, 163, 135, 168, 146, 69, 71, 166, 132, 104, 25, 179, 242, 88, 241, 203, 51, 223, 88, 45, 42, 173, 151, 110, 72, 176, 92, 53, 128, 241, 210, 111, 96, 60, 130, 178, 138, 76, 51, 17, 225, 239, 176, 146, 94, 248, 108, 17, 204, 146, 81, 18, 3, 252, 66, 94, 190, 228, 192, 243, 240, 156, 47, 103, 200, 90, 242, 251, 11, 55, 163, 120, 188, 130, 104, 70, 34, 236, 177, 183, 140, 164, 93, 41, 238, 207, 0, 208, 82, 228, 185, 183, 73, 183 },
                            Username = "MarIwin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 3, 18, 22, 3, 32, 681, DateTimeKind.Local).AddTicks(6659),
                            Email = "tymonq@gmail.com",
                            PasswordHash = new byte[] { 62, 223, 139, 86, 225, 254, 137, 231, 203, 40, 155, 213, 147, 148, 0, 57, 53, 149, 36, 31, 54, 118, 165, 48, 139, 122, 202, 80, 195, 201, 119, 185, 64, 115, 107, 215, 224, 82, 13, 113, 205, 214, 78, 255, 28, 32, 162, 81, 77, 42, 84, 155, 194, 247, 212, 41, 130, 94, 165, 160, 152, 150, 7, 47 },
                            PasswordSalt = new byte[] { 14, 170, 88, 23, 76, 8, 177, 138, 136, 130, 18, 18, 111, 42, 11, 16, 159, 67, 219, 206, 236, 231, 56, 177, 178, 94, 137, 133, 132, 157, 58, 31, 24, 28, 160, 151, 9, 45, 111, 243, 98, 249, 230, 207, 20, 206, 121, 137, 58, 81, 10, 1, 108, 82, 70, 208, 218, 195, 89, 211, 196, 198, 132, 8, 112, 137, 224, 234, 153, 247, 146, 195, 221, 113, 255, 71, 233, 9, 53, 95, 85, 42, 40, 244, 116, 151, 124, 7, 20, 186, 29, 27, 16, 61, 203, 60, 171, 205, 39, 115, 171, 125, 197, 227, 153, 86, 8, 133, 45, 95, 131, 252, 199, 117, 200, 144, 1, 219, 67, 6, 16, 88, 147, 15, 252, 12, 182, 66 },
                            Username = "TymonSme"
                        });
                });

            modelBuilder.Entity("DAL.Database.Entities.FileMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.ToTable("FileMessages", (string)null);
                });

            modelBuilder.Entity("DAL.Database.Entities.TextMessage", b =>
                {
                    b.HasBaseType("DAL.Database.Entities.Message");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("TextMessages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello1"
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "Hello2"
                        });
                });

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Database.Entities.Message", b =>
                {
                    b.HasOne("DAL.Database.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Database.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DAL.Database.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DAL.Database.Entities.User", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
